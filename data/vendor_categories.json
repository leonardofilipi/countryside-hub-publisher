import fs from 'fs';
import path from 'path';
import { parse } from 'csv-parse/sync';

const ROOT = new URL('..', import.meta.url).pathname;
const DATA_DIR = path.join(ROOT, 'data');
const CSV_PATH = path.join(DATA_DIR, 'csh_categories.csv');
const CATFINDER_PATH = path.join(DATA_DIR, 'catfinder.json');
const VENDOR_PATH = path.join(DATA_DIR, 'vendor_categories.json');

function slugify(txt) {
  return String(txt || '')
    .normalize('NFKD')
    .replace(/[\u0300-\u036f]/g, '')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

function readCSV() {
  const raw = fs.readFileSync(CSV_PATH, 'utf8');
  // CSV esperado com cabeçalhos (em PT-BR): Categoria,Subcategoria,Item
  const rows = parse(raw, { columns: true, skip_empty_lines: true, bom: true });
  // Normaliza os nomes das colunas:
  const mapCol = (row, key) => {
    const k = Object.keys(row).find(c => c.trim().toLowerCase() === key);
    return k ? String(row[k]).trim() : '';
  };
  return rows.map(r => ({
    categoria: mapCol(r, 'categoria'),
    subcategoria: mapCol(r, 'subcategoria'),
    item: mapCol(r, 'item'),
  }));
}

function buildFromRows(rows) {
  // catfinder.json: lista "flat" com parent
  const cfItems = [];
  const seen = new Set();

  // vendor_categories.json: estrutura aninhada
  const byCat = new Map();

  for (const r of rows) {
    if (!r.categoria) continue;

    const cName = r.categoria;
    const cSlug = slugify(cName);
    const cUrl  = `/collections/${cSlug}`;

    // cat nível
    const keyCat = `cat:${cSlug}`;
    if (!seen.has(keyCat)) {
      cfItems.push({ name: cName, slug: cSlug, url: cUrl });
      seen.add(keyCat);
    }

    // vendor cat init
    if (!byCat.has(cSlug)) {
      byCat.set(cSlug, { name: cName, slug: cSlug, url: cUrl, children: [] });
    }

    if (!r.subcategoria) continue;

    const sName = r.subcategoria;
    const sSlug = slugify(sName);
    const sUrl  = `/collections/${sSlug}`;

    // catfinder sub
    const keySub = `sub:${sSlug}`;
    if (!seen.has(keySub)) {
      cfItems.push({ name: sName, slug: sSlug, url: sUrl, parent: cSlug });
      seen.add(keySub);
    }

    // vendor sub
    const catEntry = byCat.get(cSlug);
    let subRef = catEntry.children.find(x => x.slug === sSlug);
    if (!subRef) {
      subRef = { name: sName, slug: sSlug, url: sUrl, items: [] };
      catEntry.children.push(subRef);
    }

    if (!r.item) continue;

    const iName = r.item;
    const iSlug = slugify(iName);
    const iUrl  = `/collections/${sSlug}?filter.p.tag=${iSlug}`;

    // catfinder item (3º nível, com parent = sub)
    const keyItem = `item:${sSlug}:${iSlug}`;
    if (!seen.has(keyItem)) {
      cfItems.push({ name: iName, slug: iSlug, url: iUrl, parent: sSlug });
      seen.add(keyItem);
    }

    // vendor item
    if (!subRef.items.find(it => it.slug === iSlug)) {
      subRef.items.push({ name: iName, slug: iSlug, url: iUrl });
    }
  }

  const catfinder = {
    rootAll: {
      slug: 'todas-as-categorias',
      name: 'Todas as Categorias',
      url: '/collections/all',
    },
    items: cfItems,
  };

  const vendor = {
    categories: Array.from(byCat.values()),
  };

  return { catfinder, vendor };
}

function main() {
  const rows = readCSV();
  const { catfinder, vendor } = buildFromRows(rows);

  fs.writeFileSync(CATFINDER_PATH, JSON.stringify(catfinder, null, 2), 'utf8');
  fs.writeFileSync(VENDOR_PATH, JSON.stringify(vendor, null, 2), 'utf8');

  console.log(`OK: gerados\n  - ${CATFINDER_PATH}\n  - ${VENDOR_PATH}`);
}

main();
json
Copy code
// data/catfinder.json (estrutura alvo gerada pelo script acima)
// Observação: este bloco mostra apenas o esqueleto. O conteúdo completo
// será gerado a partir do CSV (Categoria, Subcategoria, Item).
{
  "rootAll": {
    "slug": "todas-as-categorias",
    "name": "Todas as Categorias",
    "url": "/collections/all"
  },
  "items": [
    {
      "name": "Exemplo Categoria",
      "slug": "exemplo-categoria",
      "url": "/collections/exemplo-categoria"
    },
    {
      "name": "Exemplo Subcategoria",
      "slug": "exemplo-subcategoria",
      "url": "/collections/exemplo-subcategoria",
      "parent": "exemplo-categoria"
    },
    {
      "name": "Exemplo Item",
      "slug": "exemplo-item",
      "url": "/collections/exemplo-subcategoria?filter.p.tag=exemplo-item",
      "parent": "exemplo-subcategoria"
    }
  ]
}
json
Copy code
// data/vendor_categories.json (estrutura alvo gerada pelo script acima)
// Observação: este bloco mostra apenas o esqueleto. O conteúdo completo
// será gerado a partir do CSV (Categoria, Subcategoria, Item).
{
  "categories": [
    {
      "name": "Exemplo Categoria",
      "slug": "exemplo-categoria",
      "url": "/collections/exemplo-categoria",
      "children": [
        {
          "name": "Exemplo Subcategoria",
          "slug": "exemplo-subcategoria",
          "url": "/collections/exemplo-subcategoria",
          "items": [
            {
              "name": "Exemplo Item",
              "slug": "exemplo-item",
              "url": "/collections/exemplo-subcategoria?filter.p.tag=exemplo-item"
            }
          ]
        }
      ]
    }
  ]
}
